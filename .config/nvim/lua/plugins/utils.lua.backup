-- LSP and completion plugins
return {
    {
        "mason-org/mason.nvim",
        config = function()
            require("mason").setup()
        end,
    },

    {
        "neovim/nvim-lspconfig",
        dependencies = {
            "mason-org/mason.nvim",
            "mason-org/mason-lspconfig.nvim",
            "hrsh7th/nvim-cmp",
            "hrsh7th/cmp-nvim-lsp",
            "hrsh7th/cmp-buffer",
            "hrsh7th/cmp-path",
            "L3MON4D3/LuaSnip",
            "saadparwaiz1/cmp_luasnip",
        },
        config = function()
            local lspconfig = require("lspconfig")
            local mason_lspconfig = require("mason-lspconfig")
            local cmp = require("cmp")
            local luasnip = require("luasnip")

            -- CMP setup
            cmp.setup({
                performance = { debounce = 0, throttle = 0 },
                completion = { completeopt = "menu,menuone" },
                snippet = { expand = function(args) luasnip.lsp_expand(args.body) end },
                mapping = {
                    ["<Tab>"] = cmp.mapping.confirm({ select = true }),
                    ["<C-Space>"] = cmp.mapping.complete(),
                },
                sources = {
                    { name = "buffer", max_item_count = 3 },
                    { name = "path", max_item_count = 3 },
                    { name = "nvim_lsp", max_item_count = 3 },
                    { name = "luasnip", max_item_count = 3 },
                },
            })

            local capabilities = vim.lsp.protocol.make_client_capabilities()
            capabilities.workspace = capabilities.workspace or { didChangeWatchedFiles = { dynamicRegistration = false } }


            local function on_attach(client, bufnr)
                print(client.name .. " LSP attached")
            end

            -- Mason auto-install + setup
            mason_lspconfig.setup({ ensure_installed = { "pylsp", "clangd", "lua_ls", "hls" } })
            -- mason_lspconfig.setup_handlers({
            --     function(server_name)
            --         lspconfig[server_name].setup({
            --             capabilities = capabilities,
            --             on_attach = on_attach,
            --         })
            --     end,
            -- })

            -- Server-specific settings
            lspconfig.pylsp.setup({
                capabilities = capabilities,
                on_attach = on_attach,
                settings = {
                    pylsp = {
                        plugins = {
                            pyflakes = { enabled = false },
                            pycodestyle = { enabled = false },
                            mccabe = { enabled = false },
                            pylint = { enabled = false },
                            pylsp_mypy = { enabled = true },
                            pylsp_black = { enabled = true },
                        },
                    },
                },
            })

            lspconfig.hls.setup({
                capabilities = capabilities,
                on_attach = on_attach,
                cmd = { "haskell-language-server-wrapper", "--lsp" },
                filetypes = { "haskell", "lhaskell", "cabal" },
                root_dir = lspconfig.util.root_pattern("hie.yaml","stack.yaml","cabal.project","*.cabal",".git"),
                settings = { haskell = { formattingProvider = "fourmolu", cabalFormattingProvider = "cabalfmt" } },
            })

            lspconfig.clangd.setup({
                capabilities = capabilities,
                on_attach = on_attach,
                cmd = { "clangd", "--header-insertion=never" },
            })

            lspconfig.lua_ls.setup({
                capabilities = capabilities,
                on_attach = on_attach,
                settings = { Lua = { diagnostics = { globals = { "vim" } } } },
            })
        end,
    },
}

